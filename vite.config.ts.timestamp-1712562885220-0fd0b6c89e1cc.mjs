// vite.config.ts
import { defineConfig } from "file:///C:/Work/components/node_modules/vite/dist/node/index.js";
import dts from "file:///C:/Work/components/node_modules/vite-plugin-dts/dist/index.mjs";

// package.json
var peerDependencies = {
  react: "^18.2.0"
};

// vite.config.ts
var vite_config_default = defineConfig({
  build: {
    lib: {
      entry: "./src/index.ts",
      // Specifies the entry point for building the library.
      name: "vite-react-ts-button",
      // Sets the name of the generated library.
      fileName: (format) => `index.${format}.js`,
      // Generates the output file name based on the format.
      formats: ["cjs", "es"]
      // Specifies the output formats (CommonJS and ES modules).
    },
    rollupOptions: {
      external: [...Object.keys(peerDependencies)]
      // Defines external dependencies for Rollup bundling.
    },
    sourcemap: true,
    // Generates source maps for debugging.
    emptyOutDir: true
    // Clears the output directory before building.
  },
  test: {
    globals: true,
    environment: "jsdom",
    setupFiles: "./setupTests.ts"
  },
  plugins: [dts()]
  // Uses the 'vite-plugin-dts' plugin for generating TypeScript declaration files (d.ts).
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiQzpcXFxcV29ya1xcXFxjb21wb25lbnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFxXb3JrXFxcXGNvbXBvbmVudHNcXFxcdml0ZS5jb25maWcudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0M6L1dvcmsvY29tcG9uZW50cy92aXRlLmNvbmZpZy50c1wiOy8vLyA8cmVmZXJlbmNlIHR5cGVzPVwidml0ZXN0XCIgLz5cclxuaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcclxuaW1wb3J0IGR0cyBmcm9tIFwidml0ZS1wbHVnaW4tZHRzXCI7XHJcbmltcG9ydCB7IHBlZXJEZXBlbmRlbmNpZXMgfSBmcm9tIFwiLi9wYWNrYWdlLmpzb25cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XHJcbiAgYnVpbGQ6IHtcclxuICAgIGxpYjoge1xyXG4gICAgICBlbnRyeTogXCIuL3NyYy9pbmRleC50c1wiLCAvLyBTcGVjaWZpZXMgdGhlIGVudHJ5IHBvaW50IGZvciBidWlsZGluZyB0aGUgbGlicmFyeS5cclxuICAgICAgbmFtZTogXCJ2aXRlLXJlYWN0LXRzLWJ1dHRvblwiLCAvLyBTZXRzIHRoZSBuYW1lIG9mIHRoZSBnZW5lcmF0ZWQgbGlicmFyeS5cclxuICAgICAgZmlsZU5hbWU6IChmb3JtYXQpID0+IGBpbmRleC4ke2Zvcm1hdH0uanNgLCAvLyBHZW5lcmF0ZXMgdGhlIG91dHB1dCBmaWxlIG5hbWUgYmFzZWQgb24gdGhlIGZvcm1hdC5cclxuICAgICAgZm9ybWF0czogW1wiY2pzXCIsIFwiZXNcIl0sIC8vIFNwZWNpZmllcyB0aGUgb3V0cHV0IGZvcm1hdHMgKENvbW1vbkpTIGFuZCBFUyBtb2R1bGVzKS5cclxuICAgIH0sXHJcbiAgICByb2xsdXBPcHRpb25zOiB7XHJcbiAgICAgIGV4dGVybmFsOiBbLi4uT2JqZWN0LmtleXMocGVlckRlcGVuZGVuY2llcyldLCAvLyBEZWZpbmVzIGV4dGVybmFsIGRlcGVuZGVuY2llcyBmb3IgUm9sbHVwIGJ1bmRsaW5nLlxyXG4gICAgfSxcclxuICAgIHNvdXJjZW1hcDogdHJ1ZSwgLy8gR2VuZXJhdGVzIHNvdXJjZSBtYXBzIGZvciBkZWJ1Z2dpbmcuXHJcbiAgICBlbXB0eU91dERpcjogdHJ1ZSwgLy8gQ2xlYXJzIHRoZSBvdXRwdXQgZGlyZWN0b3J5IGJlZm9yZSBidWlsZGluZy5cclxuICB9LFxyXG4gIHRlc3Q6IHtcclxuICAgIGdsb2JhbHM6IHRydWUsXHJcbiAgICBlbnZpcm9ubWVudDogXCJqc2RvbVwiLFxyXG4gICAgc2V0dXBGaWxlczogXCIuL3NldHVwVGVzdHMudHNcIixcclxuICB9LFxyXG4gIHBsdWdpbnM6IFtkdHMoKV0sIC8vIFVzZXMgdGhlICd2aXRlLXBsdWdpbi1kdHMnIHBsdWdpbiBmb3IgZ2VuZXJhdGluZyBUeXBlU2NyaXB0IGRlY2xhcmF0aW9uIGZpbGVzIChkLnRzKS5cclxufSk7XHJcbiIsICJ7XG4gIFwibmFtZVwiOiBcIkB3ZWJvLWRpZ2l0YWwvdWktY29tcG9uZW50c1wiLFxuICBcInZlcnNpb25cIjogXCIxLjAuMFwiLFxuICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxuICBcIm1haW5cIjogXCJkaXN0L2luZGV4LmNqcy5qc1wiLFxuICBcIm1vZHVsZVwiOiBcImRpc3QvaW5kZXguZXMuanNcIixcbiAgXCJ0eXBlc1wiOiBcImRpc3QvaW5kZXguZC50c1wiLFxuICBcImZpbGVzXCI6IFtcbiAgICBcIi9kaXN0XCJcbiAgXSxcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcImZvcm1hdFwiOiBcInByZXR0aWVyIC0td3JpdGUgLS1wYXJzZXIgdHlwZXNjcmlwdCAnKiovKi57dHMsdHN4fSdcIixcbiAgICBcImxpbnRcIjogXCJlc2xpbnQgLiAtLWV4dCAudHMsLnRzeCAtLWlnbm9yZS1wYXRoIC5naXRpZ25vcmUgLS1maXhcIixcbiAgICBcImJ1aWxkXCI6IFwidHNjICYmIHZpdGUgYnVpbGRcIixcbiAgICBcInRlc3RcIjogXCJ2aXRlc3QgcnVuXCIsXG4gICAgXCJ0ZXN0LXdhdGNoXCI6IFwidml0ZXN0XCIsXG4gICAgXCJ0ZXN0OnVpXCI6IFwidml0ZXN0IC0tdWlcIixcbiAgICBcInN0b3J5Ym9va1wiOiBcInN0b3J5Ym9vayBkZXYgLXAgNjAwNlwiLFxuICAgIFwiYnVpbGQtc3Rvcnlib29rXCI6IFwic3Rvcnlib29rIGJ1aWxkXCIsXG4gICAgXCJwcmVwYXJlXCI6IFwiaHVza3kgaW5zdGFsbFwiXG4gIH0sXG4gIFwibGludC1zdGFnZWRcIjoge1xuICAgIFwiKi57dHMsdHN4fVwiOiBbXG4gICAgICBcIm5wbSBydW4gZm9ybWF0XCIsXG4gICAgICBcIm5wbSBydW4gbGludFwiLFxuICAgICAgXCJucG0gcnVuIHRlc3RcIlxuICAgIF1cbiAgfSxcbiAgXCJwdWJsaXNoQ29uZmlnXCI6IHtcbiAgICBcIkB3ZWJvLWRpZ2l0YWw6cmVnaXN0cnlcIjogXCJodHRwczovL25wbS5wa2cuZ2l0aHViLmNvbS9cIlxuICB9LFxuICBcImtleXdvcmRzXCI6IFtdLFxuICBcImF1dGhvclwiOiBcIlwiLFxuICBcImxpY2Vuc2VcIjogXCJJU0NcIixcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQGNocm9tYXRpYy1jb20vc3Rvcnlib29rXCI6IFwiXjEuMi4yNlwiLFxuICAgIFwiQHN0b3J5Ym9vay9hZGRvbi1lc3NlbnRpYWxzXCI6IFwiXjguMC41XCIsXG4gICAgXCJAc3Rvcnlib29rL2FkZG9uLWludGVyYWN0aW9uc1wiOiBcIl44LjAuNVwiLFxuICAgIFwiQHN0b3J5Ym9vay9hZGRvbi1saW5rc1wiOiBcIl44LjAuNVwiLFxuICAgIFwiQHN0b3J5Ym9vay9hZGRvbi1vbmJvYXJkaW5nXCI6IFwiXjguMC41XCIsXG4gICAgXCJAc3Rvcnlib29rL2Jsb2Nrc1wiOiBcIl44LjAuNVwiLFxuICAgIFwiQHN0b3J5Ym9vay9yZWFjdFwiOiBcIl44LjAuNVwiLFxuICAgIFwiQHN0b3J5Ym9vay9yZWFjdC12aXRlXCI6IFwiXjguMC41XCIsXG4gICAgXCJAc3Rvcnlib29rL3Rlc3RcIjogXCJeOC4wLjVcIixcbiAgICBcIkB0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb21cIjogXCJeNi40LjJcIixcbiAgICBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3RcIjogXCJeMTQuMi4yXCIsXG4gICAgXCJAdHlwZXMvbm9kZVwiOiBcIl4yMC4xMi40XCIsXG4gICAgXCJAdHlwZXMvcmVhY3RcIjogXCJeMTguMi43NFwiLFxuICAgIFwiQHR5cGVzY3JpcHQtZXNsaW50L2VzbGludC1wbHVnaW5cIjogXCJeNy41LjBcIixcbiAgICBcIkB0eXBlc2NyaXB0LWVzbGludC9wYXJzZXJcIjogXCJeNy41LjBcIixcbiAgICBcImF1dG9wcmVmaXhlclwiOiBcIl4xMC40LjE5XCIsXG4gICAgXCJlc2xpbnRcIjogXCJeOC41Ny4wXCIsXG4gICAgXCJlc2xpbnQtY29uZmlnLXByZXR0aWVyXCI6IFwiXjkuMS4wXCIsXG4gICAgXCJlc2xpbnQtcGx1Z2luLXByZXR0aWVyXCI6IFwiXjUuMS4zXCIsXG4gICAgXCJlc2xpbnQtcGx1Z2luLXJlYWN0XCI6IFwiXjcuMzQuMVwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1yZWFjdC1ob29rc1wiOiBcIl40LjYuMFwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1zdG9yeWJvb2tcIjogXCJeMC44LjBcIixcbiAgICBcImh1c2t5XCI6IFwiXjguMC4wXCIsXG4gICAgXCJqc2RvbVwiOiBcIl4yNC4wLjBcIixcbiAgICBcImxpbnQtc3RhZ2VkXCI6IFwiXjE1LjIuMlwiLFxuICAgIFwicG9zdGNzc1wiOiBcIl44LjQuMzhcIixcbiAgICBcInByZXR0aWVyXCI6IFwiXjMuMi41XCIsXG4gICAgXCJzdG9yeWJvb2tcIjogXCJeOC4wLjVcIixcbiAgICBcInRhaWx3aW5kY3NzXCI6IFwiXjMuNC4zXCIsXG4gICAgXCJ0eXBlc2NyaXB0XCI6IFwiXjUuNC4zXCIsXG4gICAgXCJ2aXRlXCI6IFwiXjUuMi44XCIsXG4gICAgXCJ2aXRlLXBsdWdpbi1kdHNcIjogXCJeMy44LjFcIixcbiAgICBcInZpdGVzdFwiOiBcIl4xLjQuMFwiXG4gIH0sXG4gIFwicGVlckRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJyZWFjdFwiOiBcIl4xOC4yLjBcIlxuICB9LFxuICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJjdmFcIjogXCJucG06Y2xhc3MtdmFyaWFuY2UtYXV0aG9yaXR5QF4wLjcuMFwiLFxuICAgIFwidGFpbHdpbmQtbWVyZ2VcIjogXCJeMi4yLjJcIlxuICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQ0EsU0FBUyxvQkFBb0I7QUFDN0IsT0FBTyxTQUFTOzs7QUNvRWQsdUJBQW9CO0FBQUEsRUFDbEIsT0FBUztBQUNYOzs7QURuRUYsSUFBTyxzQkFBUSxhQUFhO0FBQUEsRUFDMUIsT0FBTztBQUFBLElBQ0wsS0FBSztBQUFBLE1BQ0gsT0FBTztBQUFBO0FBQUEsTUFDUCxNQUFNO0FBQUE7QUFBQSxNQUNOLFVBQVUsQ0FBQyxXQUFXLFNBQVMsTUFBTTtBQUFBO0FBQUEsTUFDckMsU0FBUyxDQUFDLE9BQU8sSUFBSTtBQUFBO0FBQUEsSUFDdkI7QUFBQSxJQUNBLGVBQWU7QUFBQSxNQUNiLFVBQVUsQ0FBQyxHQUFHLE9BQU8sS0FBSyxnQkFBZ0IsQ0FBQztBQUFBO0FBQUEsSUFDN0M7QUFBQSxJQUNBLFdBQVc7QUFBQTtBQUFBLElBQ1gsYUFBYTtBQUFBO0FBQUEsRUFDZjtBQUFBLEVBQ0EsTUFBTTtBQUFBLElBQ0osU0FBUztBQUFBLElBQ1QsYUFBYTtBQUFBLElBQ2IsWUFBWTtBQUFBLEVBQ2Q7QUFBQSxFQUNBLFNBQVMsQ0FBQyxJQUFJLENBQUM7QUFBQTtBQUNqQixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
